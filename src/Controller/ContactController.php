<?php

namespace App\Controller;

use Helper\MailHelper;
use Twig\Error\LoaderError;
use Twig\Error\SyntaxError;
use Twig\Error\RuntimeError;
use PHPMailer\PHPMailer\SMTP;

use App\Controller\Controller;
use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\PHPMailer;
use App\Model\Factory\ModelFactory;

/**
 * Class ContactController
 * @package App\Controller
 */
class ContactController extends Controller
{
     /**
     * @return string
     * @throws LoaderError
     * @throws RuntimeError
     * @throws SyntaxError
     */
    public function defaultMethod()
    {


        if (!empty($this->post)) {

            
            $mail = new PHPMailer(true);


            $mail->isSMTP();
            $mail->Host = getenv('MAIL_HOST');
            $mail->SMTPAuth = getenv('MAIL_SMTP_AUTH');
            $mail->Username = getenv('MAIL_USERNAME'); //paste one generated by Mailtrap
            $mail->Password = getenv('MAIL_PASSWORD'); //paste one generated by Mailtrap
            $mail->SMTPSecure = getenv('MAIL_ENCRYPTION');
            $mail->Port = getenv('MAIL_PORT');
            

            $mail->setFrom($this->post['email'], $this->post['first-name']);
            $mail->addAddress('contact@michel.com', 'Michel');

            $mail->Subject = 'Test Email via Mailtrap SMTP using PHPMailer';
            $mail->isHTML(true);

            $mail->Body = MailHelper::htmlMail($this->post['message']);

            if($mail->send()){
                $infoSendMail='succes';
            }else{
                $infoSendMail='error';
            }

            $this->redirect('contact!create');
        }
        return $this->render('contact/create.twig');
    }


    /**
     * @return string
     * @throws LoaderError
     * @throws RuntimeError
     * @throws SyntaxError
     */
    public function createMethod()
    {


        if (!empty($this->post)) {

            
            $mail = new PHPMailer(true);


            $mail->isSMTP();
            $mail->Host = getenv('MAIL_HOST');
            $mail->SMTPAuth = getenv('MAIL_SMTP_AUTH');
            $mail->Username = getenv('MAIL_USERNAME'); //paste one generated by Mailtrap
            $mail->Password = getenv('MAIL_PASSWORD'); //paste one generated by Mailtrap
            $mail->SMTPSecure = getenv('MAIL_ENCRYPTION');
            $mail->Port = getenv('MAIL_PORT');
            

            $mail->setFrom($this->post['email'], $this->post['first-name']);
            $mail->addAddress('contact@michel.com', 'Michel');

            $mail->Subject = 'Test Email via Mailtrap SMTP using PHPMailer';
            $mail->isHTML(true);

            $mail->Body = MailHelper::htmlMail($this->post['message']);

            if($mail->send()){
                $infoSendMail='succes';
            }else{
                $infoSendMail='error';
            }

            $this->redirect('contact!create');
        }
        return $this->render('contact/create.twig');
    }

    /**
     * @return string
     * @throws LoaderError
     * @throws RuntimeError
     * @throws SyntaxError
     */
    public function showMethod()
    {
        //$dataId = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT);

        $article    = ModelFactory::getModel('Article')->readData($this->get['id']);
     
        $comments   = ModelFactory::getModel('Comment')->listData($this->get['id'], 'article_id');

        if(!empty($comments)) {

            for ($i = 0; $i < count($comments); $i++) {

                $userId = $comments[$i]['user_id'];
                $user   = ModelFactory::getModel('User')->readData($userId);

                $comments[$i]['user']   = $user['first_name'];
            }
        } 
        return $this->render('blog/show.twig', [
            'article'   => $article,
            'comments'  => $comments
        ]);
    }

    /**
     * @return string
     * @throws LoaderError
     * @throws RuntimeError
     * @throws SyntaxError
     */
    public function updateMethod()
    {
        
        if (!empty($this->post)) {

            $data['title']        = $this->post['title'];
            $data['content']      = $this->post['content'];

            ModelFactory::getModel('Article')->updateData($this->get['id'], $data);

            $this->redirect('admin');
        }
        $this->cookie->createAlert('Article définitivement supprimé !');
        $article = ModelFactory::getModel('Article')->readData($this->get['id']);

        return $this->render('admin/blog/update.twig', ['article' => $article]);
    }

    public function deleteMethod()
    {
        ModelFactory::getModel('Article')->deleteData($this->get['id']);
        $this->cookie->createAlert('Article définitivement supprimé !');

        $this->redirect('article!index');
    }
}